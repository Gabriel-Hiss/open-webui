name: Sync upstream (all branches + tags)

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: upstream-sync
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (fetch all)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git identity
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/open-webui/open-webui || true
          git fetch --prune --tags upstream

      - name: List upstream branches
        id: list
        shell: bash
        run: |
          mapfile -t BRANCHES < <(git ls-remote --heads upstream | awk '{print $2}' | sed 's#refs/heads/##')
          printf '%s\n' "${BRANCHES[@]}" > /tmp/upstream_branches.txt
          echo "count=${#BRANCHES[@]}" >> $GITHUB_OUTPUT

      - name: Sync branches
        id: sync
        shell: bash
        run: |
          set -euo pipefail

          touch /tmp/pr_list.txt
          while read -r BRANCH; do
            git fetch origin "+refs/heads/${BRANCH}:refs/remotes/origin/${BRANCH}" || true
            git fetch upstream "+refs/heads/${BRANCH}:refs/remotes/upstream/${BRANCH}"

            HAVE_ORIGIN=0
            git show-ref --verify --quiet "refs/remotes/origin/${BRANCH}" && HAVE_ORIGIN=1

            if [[ $HAVE_ORIGIN -eq 0 ]]; then
              echo "::group::Create branch ${BRANCH} (new on fork)"
              git push origin "refs/remotes/upstream/${BRANCH}:refs/heads/${BRANCH}"
              echo "::endgroup::"
              continue
            fi

            if git merge-base --is-ancestor "refs/remotes/origin/${BRANCH}" "refs/remotes/upstream/${BRANCH}"; then
              echo "::group::Fast-forward ${BRANCH}"
              git push origin "refs/remotes/upstream/${BRANCH}:refs/heads/${BRANCH}"
              echo "::endgroup::"
            else
              echo "::group::Diverged ${BRANCH} -> create/update PR"
              SYNC_BRANCH="upstream-sync/${BRANCH}"
              git push origin "refs/remotes/upstream/${BRANCH}:refs/heads/${SYNC_BRANCH}"
              echo "${BRANCH} ${SYNC_BRANCH}" >> /tmp/pr_list.txt
              echo "::endgroup::"
            fi
          done < /tmp/upstream_branches.txt

          git push origin --tags

          echo "pr_list=/tmp/pr_list.txt" >> $GITHUB_OUTPUT

      - name: Create/Update PRs for diverged branches
        if: ${{ hashFiles(steps.sync.outputs.pr_list) != '' &&  always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = `${process.env.GITHUB_WORKSPACE || '.'}/tmp_pr_list.txt`;
          env:
            PR_LIST_PATH: ${{ steps.sync.outputs.pr_list }}
          script: |
            const fs = require('fs');
            const prListPath = process.env.PR_LIST_PATH;
            if (!prListPath || !fs.existsSync(prListPath)) {
              core.info('No diverged branches, nothing to PR.');
              return;
            }
            const lines = fs.readFileSync(prListPath, 'utf8').trim().split('\n').filter(Boolean);
            for (const line of lines) {
              const [targetBranch, headBranch] = line.split(' ');
              core.info(`Ensuring PR from ${headBranch} -> ${targetBranch}`);

              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${headBranch}`,
                base: targetBranch,
                per_page: 1
              });

              if (prs.length > 0) {
                core.info(`PR already exists: #${prs[0].number}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prs[0].number,
                  labels: ['upstream-sync']
                }).catch(()=>{});
                continue;
              }

              const title = `Sync upstream â†’ ${targetBranch}`;
              const body  = [
                '**Auto-generated:** upstream diverged from this fork branch.',
                '',
                '- Source: `upstream/' + targetBranch + '`',
                '- Head: `' + headBranch + '`',
                '',
                'This PR brings the fork in line with upstream for this branch.',
              ].join('\n');

              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                head: headBranch,
                base: targetBranch,
                body,
                draft: false
              });

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['upstream-sync']
              }).catch(()=>{});
            }
